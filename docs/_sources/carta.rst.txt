
Programa del Curso
==================

.. figure:: media/ucr.banner.png
   :scale: 70%

**Sigla**: IE0621
**Grupo**: 01
**Aula**: 111
**Horario**: Martes, 6pm-8:50pm

**Profesor**: Melvin Alvarado
**Oficina**: Virtual
**Correo**: :yellow:`melvin.alvarado@ucr.ac.cr`

**Créditos**: 3
**Horas lectivas**: 3 horas por semana
**Requisitos**: :yellow:`IE-0523 Circuitos Digitales II`

**Horario de consulta**: Miércoles, 5pm-6:30pm
**Telegram**: https://t.me/+hyP7MlUImnZmZDJh

**Descripción del curso:**
Este curso es una introducción a los conceptos
básicos sobre verificación funcional de circuitos digitales descritos en HDL.

**Objetivo general**:
Introducir al estudiante a los conceptos básicos de diseño
de circuitos digitales en HDL y verificación funcional dentro del diseño de
circuitos integrados.

**Objetivos específicos**:
Al finalizar el curso los y las estudiantes deberán estar
en capacidad de:

   1. Describir un circuito digital utilizando HDL y crear un ambiente de
      verificación.
   2. Utilizar herramientas de software para la depuración de un diseño.
   3. Definir y ejecutar un plan de verificación a partir de la especificación de
      la arquitectura del diseño.
   4. Reconocer diferentes estrategias de verificación y valorar su costo
      dentro del ciclo de desarrollo de un circuito integrado.

**Metodología**:
El curso se imparte mediante clases magistrales apoyadas con material didáctico
y proyectos de verificación. Se utilizará la plataforma Mediación Virtual para colocar documentos, presentaciones
y para mantener comunicación con los estudiantes respecto a las calificaciones de los proyectos,
los cuales se evaluarán por medio de exposiciones durante las clases.



Contenido
---------

.. include:: carta.contenido.rst


Cronograma
----------
I ciclo lectivo 2022.
Las lecciones iniciarán este 28 de marzo y concluirán el próximo 23 de julio.
El período para exámenes finales comprenderá del 26 al 30 de julio.


.. table::

   ======== ======== =============================
   Semana   Fecha    Tema
   ======== ======== =============================
   1        Mar 29   Intro/Ambiente/Makefile
   2        Abr 5    Verilog
   ---      Abr 12   Semana Santa
   3        Abr 19   SV Verif
   4        Abr 26   UVM I (Semana U)
   5        May 3    UVM II
   6        May 10   *DUTs*
   7        May 17   Estrategia Verif I
   8        May 24   :yellow:`Presentación A#1`
   9        May 31   Coverage/Assertions
   10       Jun 7    Ciclo Verif
   11       Jun 14   Plan de Pruebas
   12       Jun 21   :yellow:`Presentación A#2`
   13       Jun 28   *Chip*
   14       Jul 5    Costo Verif I
   15       Jul 12   Ciclo Verif II
   16       Jul 19   :yellow:`Presentación Final`
   17       Jul 26   ---
   ======== ======== =============================



Evaluación
----------

Durante el curso se desarrollará un proyecto de verificación.


* El proyecto debe realizarse en grupos
* Cada grupo trabajará utilizando un módulo asignado
* :yellow:`Se calificará con una nota de cero si se demuestra cualquier tipo de plagio`


.. table::

   =========== ========================
   Grupo       Módulo
   =========== ========================
   1           Control FSM
   2           Counter
   3           Unpacker FSM
   4           Registros
   5           SPI
   6           Arb/Ifc/Counter
   =========== ========================

.. table::

   =========== ========================
   Etapa       Porcentaje de nota final
   =========== ========================
   Avance #1   30%
   Avance #2   30%
   Final       40%
   =========== ========================

La nota deberá ser mayor a 70 para aprobar el curso.


Avance #1
---------

Para el módulo (DUT) asignado, crear un testbench UVM basado en capas:

* Estructura de directorios rtl/dv e incluir utils/Makefile para simular (si se usa el ambiente docker)
* En caso de encontrar errores en el DUT, reportarlos y corregirlos.
* Tests dirigidos
* Requisitos:

  * Generación de estímulo (Test/Sequences)
  * Env
  * Driver
  * Scoreboard/Checkers
  * Monitor


Se calificará:

* 25% cumplimento de requisitos
* 50% funcionalidad del testbench basado en capas (10% cada uno):

  * Generación de estímulo (Test/Sequences)
  * Env
  * Driver
  * Scoreboard/Checkers
  * Monitor

* 10% exposición
* 15% preguntas teóricas del proyecto


Avance #2
---------

* Agregar al testbench del Avance #1 los siguientes módulos:

  * Cobertura funcional (5 puntos de cobertura por cada miembro del equipo)
  * Aserciones (5 aserciones por cada miembro del equipo)
  * Generar un reporte de cobertura

* En caso de encontrar errores en el DUT, reportarlos y corregirlos.
* Tests aleatorios

Se calificará:

* 20% cumplimento de requisitos
* 60% funcionalidad de los módulos:

  * Aserciones: 30%
  * Cobertura funcional: 30%

* 10% exposición
* 10% preguntas teóricas del proyecto


Final
-----

Crear un plan de verificación con las siguientes secciones (utilizar como referencia el documento visto en clase):

* Estrategia de verificación

  * Niveles de verificación (bloque/chip)
  * Ambiente verificación
  * Alcance del plan de verificación
  * Requerimientos de cobertura y métricas
  * Lista de funciones a verificar

* Ejecutar el plan de verificación utilizando el testbench desarrollado en el avance #1 y #2:

  * Se deben crear los escenarios necesarios para llegar a un 100% de cobertura de transición y funcional
  * Se debe incluir dentro de la lista de funciones a verificar una sección reinicio (reset) y relojes
  * Se debe incluir escenarios de nivel chip

* En caso de encontrar errores en el DUT, reportarlos y corregirlos.

Se calificará:

* 20% cumplimiento de requisitos
* 20% funcionalidad del testbench
* 20% Pruebas para cobertura al 100%
* 20% Plan de verificación
* 10% exposición
* 10% preguntas teóricas del proyecto


Entregables
-----------

* :yellow:`Según la fecha indicada en el cronograma, antes de la clase (6pm)`
* Se debe trabajar sobre la copia del repositorio git y mantener la estructura de directorios
* Cada *DUT* debe incluir un Makefile para correr los tests <dut>/utils/Makefile (aplica para ambiente docker)
* Incluir un archivo README con los archivos creados o modificados
* :yellow:`Se debe entregar un archivo .tar.gz con el repo del al correo del profesor.`
* Presentación en formato LibreOfficeImpress/PowerPoint para cada avance
* Documento en formato PDF/LibreOfficeWrite/Word con el plan de verificación (solo para Final).


Hostigamiento Sexual
--------------------

.. figure:: media/ucr.hostigamiento.png
   :scale: 70%

